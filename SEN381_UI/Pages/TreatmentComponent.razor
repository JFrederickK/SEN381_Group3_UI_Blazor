@page "/Treatment"
@using SEN381_UI.Data
@using SEN381_UI.Shared.MockData
<h3>Treatment Component</h3>
<MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Treatment,bool>(FilterFunc)" @bind-SelectedItem="selectedItem" SortLabel="Sort by" LoadingProgressColor="Color.Primary" FixedHeader="@Theader">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Treatment</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        @*<col style="background-color:aqua"/>
        <col style="background-color:aquamarine"/>
        <col style="background-color:aqua"/>
        <col style="background-color:aquamarine" />*@

    </ColGroup>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Medica lService Providers</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.TreatmentID</MudTd>
        <MudTd DataLabel="Name">@context.TreatmentName</MudTd>
        <MudTd DataLabel="Description">@context.TreatmentDescription</MudTd>
        <MudTd DataLabel="Medica lService Providers">
            <MudChipSet>
                @foreach (string item in getProviderNames(context.MedicalServiceProviders))
                {
                    <MudChip>@item</MudChip>
                }
            </MudChipSet>
            @context.MedicalServiceProviders
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" Href="/TreatmentAdd" Style="margin-top:1%" />

@code {
    private bool Theader = true;
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString = "";
    private Treatment selectedItem = null;
    private HashSet<Treatment> selectedItems = new HashSet<Treatment>();

    private IEnumerable<Treatment> Elements = new List<Treatment>();
    protected override void OnInitialized()
    {
        Elements = new Treatment_Mock().GetTreatments();
    }

    private bool FilterFunc(Treatment element) => FilterFunc(element, searchString);

    private bool FilterFunc(Treatment element, string searchString)// Remove to filter with query
    {
        //if (string.IsNullOrWhiteSpace(searchString))
        //    return true;
        //if (element.TreatmentID.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if (element.TreatmentName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if (element.TreatmentDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        ////if (element.MedicalServiceProviders.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        ////    return true; 
        //if ($"{element.TreatmentID} {element.TreatmentName} {element.TreatmentDescription} {element.MedicalServiceProviders} ".Contains(searchString))
        //    return true;
        return false;
    }

    private List<string> getProviderNames(List<MedicalServiceProvider> providers){
        List<string> name = new List<string>();

        foreach (MedicalServiceProvider item in providers)
        {
            name.Add(item.PolicyProviderName);
        }

        return name;
    }
}