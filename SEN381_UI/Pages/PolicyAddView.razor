@page "/PolicyAdd"
@using SEN381_UI.Data
@using SEN381_UI.Shared.MockData
@inject NavigationManager UriHelper
@inject IDialogService DialogService

<MudCard style="max-height:1000px; overflow: auto;">


    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5" Align="Align.Center">Create Policy</MudText>
        </CardHeaderContent>
        <CardHeaderAvatar>
            <MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%" Href="/Policy">Back</MudIconButton>
        </CardHeaderAvatar>
    </MudCardHeader>


    <MudForm Class="p-5">

        <MudGrid>

            <MudItem xs="12" sm="6">
                <MudTextField T="string" Label="Policy Name" @bind-Value=@policyName Text="@policyName"></MudTextField>
            </MudItem>
            
            <MudItem xs="12" sm="6">
                <MudTextField T="string" Label="Policy Status" @bind-Value=@policyStatus Text="@policyStatus"></MudTextField>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudDateRangePicker Label="Policy Availability Dates" @bind-DateRange="_dateRange"></MudDateRangePicker>
            </MudItem>

            @*Different Packages*@
            <MudItem lg="12" sm="6">
                <MudExpansionPanel class="h-25" Text="Policy Packages">

                    <MudExpansionPanels style="max-height:400px; overflow: auto;" class="accordion-body">
                        @foreach (Package package in packages)
                        {
                            string text = $"Package ID:{@package.PackageID}";
                            <MudGrid>
                                <MudItem xs="9">
                                    <MudExpansionPanel Text="@text">
                                        @foreach (PackageTreatmentCoverage item in package.TreatmentCoverages)
                                        {

                                            <MudCard class="mt-2 p-2">
                                                <MudText Align="Align.Center"> Treatment: @item.Treatment.TreatmentName </MudText>
                                                <MudText Align="Align.Center"> Coverage Level: @item.Coverage.CoverageDescription </MudText>
                                            </MudCard>

                                        }

                                    </MudExpansionPanel>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudText Align="Align.Center">
                                        <MudCheckBox @bind-Checked="@Basic_CheckBox1"></MudCheckBox>
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        }
                    </MudExpansionPanels>
                </MudExpansionPanel>
            </MudItem>

            <MudGrid Style="margin-top:auto">
                <MudItem xs="12" sm="6">
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" FullWidth="true" OnClick="@cancel">Cancel Changes</MudButton>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudButton Variant="Variant.Outlined" Color="Color.Success" FullWidth="true" OnClick="@addPolicy" ButtonType="ButtonType.Submit" Class="ml-auto">Save Changes</MudButton>
                </MudItem>
            </MudGrid>
        </MudGrid>
    </MudForm>

</MudCard>


@code {
    string policyId { get; set; } = "";
    string policyName { get; set; }
    string policyStatus { get; set; }

    List<Package> packages = new PackageMock().getPackages();//Replace with service
                                                             //List<Client> clients = new ClientMock().GetClients();//Replace with service


    public bool Basic_CheckBox1 { get; set; } = true;

    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);//Used for date picker

    private void navigateBack(){
        UriHelper.NavigateTo("Policy");
    }


    private async void addPolicy()
    {
        Policy newpolicy = new Policy(policyId, policyName, policyStatus, _dateRange, packages);

        PolicyService policyService = new PolicyService();

        await policyService.addPolicy(newpolicy).ContinueWith((x)=> {

            string message = "";
            message = x.Result != null ? "Policy is successfully created" : "Policy could not be created";
            showDialog(message);
        });
    }
    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Client", paramaters, options).Result;
            if (message != "Policy could not be created")
            {
                UriHelper.NavigateTo("/Policy");
            }
        });
    }
    private void cancel()
    {
        UriHelper.NavigateTo("/Policy");
    }
}

