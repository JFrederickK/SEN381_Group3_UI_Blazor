@page "/PolicyAdd"
@inject NavigationManager UriHelper
@inject IDialogService DialogService

<MudCard style="max-height:1000px; overflow: auto;">


    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5" Align="Align.Center">Create Policy</MudText>
        </CardHeaderContent>
        <CardHeaderAvatar>
            <MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%" Href="/Policy">Back</MudIconButton>
        </CardHeaderAvatar>
    </MudCardHeader>


    <MudForm Class="p-5">

        <MudGrid>

            <MudItem xs="12" sm="6">
                <MudTextField T="string" Label="Policy Name" @bind-Value=@policyName Text="@policyName"></MudTextField>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudDateRangePicker Label="Policy Availability Dates" @bind-DateRange="_dateRange"></MudDateRangePicker>
            </MudItem>

             @*TreatmentsCoverages*@
    <MudItem xs="6" sm="6">
        <MudExpansionPanels class="accordion-body">
            @foreach (Package package in packages)
            {
                string text = $"Package ID: {package.PackageID}";
                
                <MudGrid>
                    <MudItem xs="9">
                        <MudExpansionPanel Text="@text">

                                    @foreach (PackageTreatmentCoverage ptc in package.TreatmentCoverages)
                                    {
                                        <MudCard class="mt-2 p-2">
                                            <MudText Align="Align.Center"> Treatment Name: @ptc.Treatment.TreatmentName </MudText>
                                            <MudText Align="Align.Center"> Coverage Description: @ptc.Coverage.CoverageDescription </MudText>
                                        </MudCard>
                                    }
                                   
                        </MudExpansionPanel>

                    </MudItem>

                    <MudItem xs="3">
                        <MudText Align="Align.Center">
                            @if (selectedPackages.Contains(package))
                            {
                                <MudButton OnClick="()=>removePackage(package)" Variant="Variant.Filled" Color="Color.Error">Remove</MudButton>
                            }
                            else
                            {
                                <MudButton OnClick="()=>addPackage(package)" Variant="Variant.Filled" Color="Color.Success">Add</MudButton>
                            }
                        </MudText>
                    </MudItem>
                </MudGrid>

            }
        </MudExpansionPanels>
    </MudItem>

            <MudGrid Style="margin-top:auto">
                <MudItem xs="12" sm="6">
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" FullWidth="true" OnClick="@cancel">Cancel Changes</MudButton>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudButton Variant="Variant.Outlined" Color="Color.Success" FullWidth="true" OnClick="@addPolicy" ButtonType="ButtonType.Submit" Class="ml-auto">Save Changes</MudButton>
                </MudItem>
            </MudGrid>
        </MudGrid>
    </MudForm>

</MudCard>


@code {
    string policyId { get; set; } = "";
    string policyName { get; set; }

    List<Package> packages = new List<Package>();//Replace with service
                                                 //List<Client> clients = new ClientMock().GetClients();//Replace with service

    List<Package> selectedPackages = new List<Package>();

    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);//Used for date picker


    protected async override Task OnInitializedAsync()
    {
        //get list of providers
        await new PackageService().getPackages(1000, 1).ContinueWith((x)=>{
            packages = x.Result;
        });
    }


    private void navigateBack(){
        UriHelper.NavigateTo("Policy");
    }


    private void addPolicy()
    {
        Policy newpolicy = new Policy(policyId, policyName, "", _dateRange.Start, _dateRange.End, selectedPackages);

        PolicyService policyService = new PolicyService();

        policyService.addPolicy(newpolicy).ContinueWith((x)=> {

            string message = "";
            message = x.Result != null ? "Policy is successfully created" : "Policy could not be created";
            showDialog(message);

        });
    }



    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");


        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Client", paramaters, options).Result;
            if (message != "Policy could not be created")
            {
                UriHelper.NavigateTo("/Policy");
            }
        });
    }



    private void cancel()
    {
        UriHelper.NavigateTo("/Policy");
    }


    private void addPackage(Package package){
        selectedPackages.Add(package);
    }
    private void removePackage(Package package)
    {
        selectedPackages.Remove(package);
    }
}

