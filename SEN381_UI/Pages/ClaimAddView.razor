@page "/ClaimAddView"
@using SEN381_API_Group3.shared.models
@using SEN381_UI.Data
<MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%">Back</MudIconButton>

<MudGrid >
<MudItem xs="12" sm="6">
    <MudPaper Elevation="3" Outlined="true">
<MudTable Items="@Elements" Hover="true" Bordered="@bordered" Striped="@striped" Filter="new Func<Client,bool>(FilterFunc)" @bind-SelectedItem="selectedItem" SortLabel="Sort by">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Clients Details</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Surname</MudTh>
        <MudTh>Address</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Phone</MudTh>
        <MudTh>Policies</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.ClientID</MudTd>
        <MudTd DataLabel="Name">@context.ClientName</MudTd>
        <MudTd DataLabel="Surname">@context.ClientSurname</MudTd>
        <MudTd DataLabel="Adress">@context.ClientAddress</MudTd>
        <MudTd DataLabel="Email">@context.ClientEmail</MudTd>
        <MudTd DataLabel="Phone">@context.ClientPhoneNumber</MudTd>
        <MudTd DataLabel="Policies">@context.Policies</MudTd>
        <MudTd DataLabel="Status">@context.ClientStatus</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
    </MudPaper>
        <MudItem xs="12" sm="12" Style="margin-bottom:3%; margin-top:1%">
            <MudAutocomplete T="string" Label="Place of treatment" @bind-Value="value" SearchFunc="@PlaceOfTreatment" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" Style="margin-bottom:3%; margin-top:1%" />
        </MudItem>
        <MudItem xs="12" sm="12" Style="margin-bottom:3%">
            <MudGrid>
        <MudItem xs="12" sm="6" >
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true">Start Call</MudButton>
        </MudItem>
        <MudItem xs="12" sm="6">
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" FullWidth="true">End Call</MudButton>
        </MudItem>
            </MudGrid>
        </MudItem>
        <MudTextField @bind-Value="ReadOnly" Label="Call Duration" ReadOnly="true" Variant="Variant.Outlined" />
    </MudItem>
 <MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Outlined="true">
    <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTable Items="@MedicalElements" MultiSelection="true" @bind-SelectedItems="selectedMedicals" Hover="true">
                            <ToolBarContent>
        <MudText Typo="Typo.h6">Medical conditions</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchMedical" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.MedicalConditionID</MudTd>
        <MudTd DataLabel="Sign">@context.MedicalConditionName</MudTd>

    </RowTemplate>
    <FooterContent>
        <MudTd colspan="5">Select All</MudTd>
    </FooterContent>
</MudTable>
                    <MudText Inline="true">Selected items: @(selectedMedicals == null ? "" : string.Join(", ", selectedMedicals.OrderBy(x => x.MedicalConditionName).Select(x => x.MedicalConditionName)))</MudText>
                </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTable Items="@TreatmentsElements" MultiSelection="true" @bind-SelectedItems="selectedTreatments" Hover="true">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Treatment list</MudText>
                                <MudSpacer />
                                <MudTextField @bind-Value="searchTreatment" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh>Nr</MudTh>
                                <MudTh>Sign</MudTh>

                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Nr">@context.TreatmentID</MudTd>
                                <MudTd DataLabel="Sign">@context.TreatmentName</MudTd>

                            </RowTemplate>
                            <FooterContent>
                                <MudTd colspan="5">Select All</MudTd>
                            </FooterContent>
                        </MudTable>
                        <MudText Inline="true">Selected items: @(selectedTreatments == null ? "" : string.Join(", ", selectedTreatments.OrderBy(x => x.TreatmentName).Select(x => x.TreatmentName)))</MudText>
                    </MudItem>

    </MudGrid>
        </MudPaper>
 </MudItem>

</MudGrid>

    @code {
    private bool striped = true;
    private bool bordered = true;
    private string searchString = "";
    private Client selectedItem = null;
    private HashSet<Client> selectedItems = new HashSet<Client>();

    private IEnumerable<Client> Elements = new List<Client>();

    protected override void OnInitialized()
    {
        Elements = new ClientMock().GetClients();
        MedicalElements = new MedicalConditionMock().GetMedicals();
        TreatmentsElements = new TreatmentMock().GetTreatments();

    }
    private bool FilterFunc(Client element) => FilterFunc(element, searchString);

    private bool FilterFunc(Client element, string searchString)
    {

        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ClientID.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ClientName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ClientSurname.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ClientAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ClientEmail.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ClientPhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Policies.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ClientStatus.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ClientAdHocNotes.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.ClientName} {element.ClientSurname} {element.ClientAddress} {element.ClientEmail} {element.ClientPhoneNumber} {element.Policies} {element.ClientStatus} {element.ClientAdHocNotes}".Contains(searchString))
            return true;
        return false;
    }
    private string value;
    private string[] placeOfTreatment =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };
    private async Task<IEnumerable<string>> PlaceOfTreatment(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return placeOfTreatment;
        return placeOfTreatment.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    public string ReadOnly { get; set; } = "Call Duration";
    // Medical condition dummy
    private string searchMedical = "";
    private MedicalCondition selectedMedical = null;
    private HashSet<MedicalCondition> selectedMedicals = new HashSet<MedicalCondition>();

    private IEnumerable<MedicalCondition> MedicalElements = new List<MedicalCondition>();
    private bool Filter(MedicalCondition element) => Filter(element, searchMedical);

    private bool Filter(MedicalCondition element, string searchMedical)
    {

        if (string.IsNullOrWhiteSpace(searchMedical))
            return true;
        if (element.MedicalConditionID.Contains(searchMedical, StringComparison.OrdinalIgnoreCase))
        return true;
        if (element.MedicalConditionName.Contains(searchMedical, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.MedicalConditionID} {element.MedicalConditionName}".Contains(searchMedical))
            return true;
        return false;
    }
    //Treatment dummy
    private string searchTreatment = "";
    private Treatment selectedTreatment = null;
    private HashSet<Treatment> selectedTreatments = new HashSet<Treatment>();

    private IEnumerable<Treatment> TreatmentsElements = new List<Treatment>();
    private bool FilterTreatment(Treatment element) => FilterTreatment(element, searchTreatment);

    private bool FilterTreatment(Treatment element, string searchMedical)
    {

        if (string.IsNullOrWhiteSpace(searchMedical))
            return true;
        if (element.TreatmentID.Contains(searchMedical, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.TreatmentName.Contains(searchMedical, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.TreatmentID} {element.TreatmentName}".Contains(searchTreatment))
            return true;
        return false;
    }


}
