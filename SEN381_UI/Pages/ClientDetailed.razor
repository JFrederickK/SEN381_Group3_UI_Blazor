@page "/Client/{id}"
@inject IDialogService DialogService
@inject NavigationManager UriHelper

@if (load)
{
    <MudCard style="max-height:1000px; overflow: auto;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Align="Align.Center">Clients Detailed view</MudText>
            </CardHeaderContent>
            <CardHeaderAvatar>
                <MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%" Href="/Client">Back</MudIconButton>
            </CardHeaderAvatar>
        </MudCardHeader>
        <MudForm Class="p-5">
            <MudGrid>

                @*Medical Condition Basic Details*@
                <MudItem xs="6" sm="6">
                    <MudTextField T="string" Label="Client ID" ReadOnly="true" Text="@id"></MudTextField>
                </MudItem>

                <MudItem xs="6" sm="6">
                    <MudTextField T="string" Label="Client Name" @bind-Value=@name Text="@name"></MudTextField>
                </MudItem>

                <MudItem xs="6" sm="6">
                    <MudTextField T="string" Label="Client Surname" @bind-Value=@surname Text="@surname"></MudTextField>
                </MudItem>
                <MudItem xs="6" sm="6">
                    <MudTextField T="string" Label="Client Address" @bind-Value=@address Text="@address"></MudTextField>
                </MudItem>

                <MudItem xs="6" sm="6">
                    <MudTextField T="string" Label="Client Email" @bind-Value=@email Text="@email"></MudTextField>
                </MudItem>

                <MudItem xs="6" sm="6">
                    <MudTextField T="string" Label="Client Phone number" @bind-Value=@phonenumber Text="@phonenumber"></MudTextField>
                </MudItem>
                @*<MudItem xs="6" sm="6">
                    <MudTextField T="string" Label="Client Polisies" @bind-Value=@clientpolicies Text="@clientpolicies"></MudTextField>
                </MudItem>*@

                <MudItem xs="6" sm="6">
                    <MudTextField T="string" Label="Client status" @bind-Value=@status Text="@status"></MudTextField>
                </MudItem>

                <MudItem xs="6" sm="6">
                    <MudTextField T="string" Label="Client Notes" @bind-Value=@notes Text="@notes"></MudTextField>
                </MudItem>

                @*Treatment Details *@
                <MudItem lg="12">
                    <MudExpansionPanel class="h-25" Text="List of Policies">
                        <MudGrid>
                            @*Policy *@
                            <MudItem xs="6">
                                <MudExpansionPanels style="max-height:400px; overflow: auto;" class="accordion-body">
                                    @foreach (Policy policy in policies)
                                    {
                                        string text = $"Policy ID: {@policy.PolicyId}";
                                        <MudExpansionPanel Text="@text">
                                            <MudText> Policy Name: @policy.PolicyName </MudText>
                                            <MudText> Policy Status: @policy.PolicyStatus </MudText>
                                        </MudExpansionPanel>
                                        <MudButton OnClick="()=>addPolicy(policy)" Color="Color.Success"> Make Active Policy</MudButton>
                                    }
                                </MudExpansionPanels>
                            </MudItem>
                            @*Selected Policy*@
                            <MudItem xs="6">
                                <MudCard class="align-content-center">
                                    <MudCardHeader class="justify-content-center">
                                        Active Policy
                                    </MudCardHeader>
                                    @if (selectedPolicy!=null)
                                    {
                                        <MudCardContent class="justify-content-center">
                                            <MudText class="justify-content-center"> Policy Name: @selectedPolicy.PolicyName </MudText>
                                            <MudText class="justify-content-center"> Policy Status: @selectedPolicy.PolicyStatus </MudText>
                                        </MudCardContent>
                                        <MudCardActions class="justify-content-center">
                                            <MudButton OnClick="()=>removePolicy(selectedPolicy)"  Color="Color.Error"> Remove Policy</MudButton>
                                        </MudCardActions>  
                                    }
                                    else {
                                        <MudCardContent>
                                            Client does not have any active policies
                                        </MudCardContent>
                                    }
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    </MudExpansionPanel>
                </MudItem>
                <MudGrid>
                    <MudItem class="align-content-center" lg="12" sm="4">
                        <MudButton class="align-content-center"  OnClick="@navigateToFamilyMembers">View Client Family Members </MudButton>
                    </MudItem>
                    <MudItem xs="4" sm="4">
                        <MudButton Color="Color.Info" OnClick="@cancel">Cancel Changes <MudIcon Icon="@Icons.Filled.Cancel" Color="Color.Info"></MudIcon></MudButton>
                    </MudItem>
                    <MudItem xs="4" sm="4">
                        <MudButton Color="Color.Success" OnClick="@updateClient">Save Changes  <MudIcon Icon="@Icons.Filled.PublishedWithChanges" Color="Color.Success"></MudIcon></MudButton>
                    </MudItem>
                    <MudItem xs="4" sm="4">
                        <MudButton Color="Color.Error" OnClick="@deleteClient">Delete Client <MudIcon Icon="@Icons.Filled.Delete" Color="Color.Error"></MudIcon></MudButton>
                    </MudItem>
                </MudGrid>

            </MudGrid>
        </MudForm>

    </MudCard>
}



@code {
    private Client clientDetails = new Client();
    private Client newDetails = new Client();

    [Parameter]
    public string? id { get; set; }


    private bool load = false;
    private string name { get; set; }
    private string surname { get; set; }
    private string address { get; set; }
    private string email { get; set; }
    private string phonenumber { get; set; }
    private ClientPolicy? clientPolicy { get; set; }
    private string status { get; set; }
    private string notes { get; set; }

    private Client originalClient = new Client();
    private Client newClient = new Client();


    List<Policy> policies = new List<Policy>();
    Policy? selectedPolicy;

    protected async override Task OnInitializedAsync()
    {
        await LoadPolicies();
        await LoadClient();
        load = true;
    }
    private async Task LoadClient()
    {
        ClientService cs = new ClientService();
        await cs.getClientDetails(id).ContinueWith((x) =>
        {
            name = x.Result.ClientName;
            surname = x.Result.ClientSurname;
            address = x.Result.ClientAddress;
            email = x.Result.ClientEmail;
            phonenumber = x.Result.ClientPhoneNumber;
            clientPolicy = x.Result.Policy;
            status = x.Result.ClientStatus;
            notes = x.Result.ClientAdHocNotes;

            if (clientPolicy!=null)
            {
                addPolicy(policies.Find((x)=>x.PolicyId==clientPolicy.PolicyID));
            }

            originalClient = new Client(id, name, surname, address, email, phonenumber, x.Result.Policy, status, notes);
        });
    }

    private async Task LoadPolicies()
    {
        await new PolicyService().getPolicies(1000,1).ContinueWith((x) =>
        {
            if (x.Result != null) policies = x.Result;
        });
    }


    private async void updateClient()
    {
        if (selectedPolicy != null) clientPolicy = new ClientPolicy(selectedPolicy.PolicyId, selectedPolicy.PolicyName, selectedPolicy.PolicyStatus);
        else clientPolicy = new ClientPolicy(null,null,null);
        Client newClient = new Client(id, name, surname, address, email, phonenumber,clientPolicy , status, notes);
        if (!newClient.Equals(originalClient))
        {
            await new ClientService().updateClient(newClient).ContinueWith((x) =>
            {
                string message = "";
                message = x.Result != null ? "Client successfully updated" : "Client could not be updated";
                showDialog(message);
            });
        }
        else showDialog("No changes to apply.");


    }
    private void cancel()
    {
        UriHelper.NavigateTo("/Client");
    }
    private async void deleteClient()
    {
        await new ClientService().deleteClient(id).ContinueWith((x) =>
        {

            string message = "";
            message = x.Result != null ? "Client successfully deleted" : "Client could not be deleted";
            showDialog(message);
        }
        );

    }
    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Client", paramaters, options).Result;
        });
    }

    private void removePolicy(Policy pol){
        policies.Add(pol);
        selectedPolicy = null;
    }

    private void addPolicy(Policy pol)
    {
        if (selectedPolicy != null) policies.Add(selectedPolicy);
        policies.Remove(pol);
        selectedPolicy = pol;
    }

    private void navigateToFamilyMembers(){
        UriHelper.NavigateTo($"/FamilyMembers/{id}");
    }

}