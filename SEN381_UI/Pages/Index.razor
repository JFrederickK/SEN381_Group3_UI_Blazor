@page "/"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager UriHelper
@inject IDialogService DialogService
<h1>Login</h1>
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 20 characters"
                                  @bind-Value="Username" For="@(() => model.EmployeeName)" />
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="Email" For="@(() => model.EmployeeEmail)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="Password" For="@(() => model.EmployeePassword)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton  Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@Validate">Login</MudButton>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" Color="Color.Secondary" Class="ml-auto" Href="/Register">
                        <NavLink href="/Register">register</NavLink>
                    </MudButton>

                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Please fill in all the fields
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>




@code {
    EmployeeDetails model = new EmployeeDetails();
    List<EmployeeDetails> checkDetail = new List<EmployeeDetails>();

    [Required]
    [StringLength(20, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
    public string Username { get; set; }

    [Required]
    [EmailAddress]
    public string Email { get; set; }

    [Required]
    [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
    public string Password { get; set; }

    public void Validate() {
        model.EmployeeName = Username;
        model.EmployeeEmail = Email;
        model.EmployeePassword = Password;
        foreach (EmployeeDetails item in checkDetail)
        {
            if (item.GetHashCode().Equals(model.GetHashCode()))
            {
                showDialog("Welcome back");
                break;
            }
            else{
                showDialog("Sorry. The details give does not match. Please try again");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }
    private async Task LoadEmployees()
    {
        LoginService cs = new LoginService();
        await cs.LoadLogin().ContinueWith((x) =>
        {
            checkDetail = x.Result;
        });
    }
    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Employee", paramaters, options).Result;
            if (message != "Employee could could not be created")
            {
                UriHelper.NavigateTo("/");
            }
        });
    }

    private void OnValidSubmit(EditContext context)
    {
        StateHasChanged(); 
    }


}