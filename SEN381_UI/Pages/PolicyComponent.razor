@page "/Policy"
@using SEN381_UI.BusinessLayer.Services
@using SEN381_UI.Data
@using SEN381_UI.Shared.MockData

@inject NavigationManager Navigation
@inject NavigationManager UriHelper
@inject IDialogService DialogService

<h3>Policy Component</h3>

<MudTable ServerData="@(new Func<TableState, Task<TableData<Policy>>>(loadPolicies))" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" 
          Filter="new Func<Policy,bool>(FilterFunc)" @bind-SelectedItem="selectedItem" SortLabel="Sort by"
          T="Policy"
          OnRowClick="@navigate"
          @ref="table">
          
    <ToolBarContent>
        <MudText Typo="Typo.h6">Policy</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Policy ID</MudTh>
        <MudTh>Policy Name</MudTh>
        <MudTh>Policy Status</MudTh>
        <MudTh>Package Treatments</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Policy ID">@context.PolicyId</MudTd>
        <MudTd DataLabel="Policy Name">@context.PolicyName</MudTd>
        <MudTd DataLabel="Policy Status">@context.PolicyStatus</MudTd>
        <MudTd DataLabel="Package Treatments">
            @foreach (string item in @PackageTreatments(@context.Package))
            {
                <MudChip>item</MudChip>
            } 
        </MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager Count="@totalSize" PageSizeOptions="@pageSizeOptions"/>
    </PagerContent>
</MudTable>
<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Href="/PolicyAdd" />

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString = "";
    private Policy selectedItem = null;
    private HashSet<Policy> selectedItems = new HashSet<Policy>();


    //Pagination
    private int[] pageSizeOptions = new int[] { 5, 10, 15,25 };
    private int page=1;
    private int size=5;
    private int totalSize=10;
    private int totalPages= 2;
    private MudTable<Policy>? table;


    private List<Policy> Elements = new List<Policy>();


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(10);
        return base.OnAfterRenderAsync(firstRender);
    }


    // Get all policies
    private async Task<TableData<Policy>> loadPolicies(TableState state)
    {
        PolicyService ps = new PolicyService();
        await ps.getPolicies(state.PageSize, state.Page + 1).ContinueWith((x) =>
           {
               Elements = x.Result;
           });
        return new TableData<Policy>() { Items = Elements, TotalItems = Elements.Count };
    }


    // Delete Policy
    private async void deletePolicy(string id)
    {
        await new PolicyService().deletePolicy(id).ContinueWith(async (x) =>
        {
            string message = x.Result != null ? "Policy Deleted Succesfully" : "Something went wrong!";
            await showDialog(message);
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
            UriHelper.NavigateTo($"/Policy",true);
        });
    }

    private bool FilterFunc(Policy element) => FilterFunc(element, searchString);


    // Policy Filter functions
    private bool FilterFunc(Policy element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.PolicyId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PolicyName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PolicyStatus.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    // Get Packages
    private List<string> PackageTreatments(List<Package> pack){
        List<string> treatments = new List<string>();

        foreach (Package item in pack)
        {
            foreach (PackageTreatmentCoverage tc in item.TreatmentCoverages)
            {
                treatments.Add(tc.Treatment.TreatmentName);
            }
        }
        return treatments;
    }


    // Navigate to Policy Details Page
    private void navigate(TableRowClickEventArgs<Policy> p)
    {
        Navigation.NavigateTo($"Policy/{p.Item.PolicyId}");
    }


    // Show Dialog
    private async Task showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialog");
        await InvokeAsync(async () =>
        {
            await DialogService.Show<Dialogue>("Update Policy", paramaters, options).Result;

        });
    }
}
