@page "/TreatmentAdd"
@using SEN381_UI.Shared.MockData
@inject IDialogService DialogService
@inject NavigationManager navigate;
<h3>Add treatment</h3>
<MudGrid>
    <MudItem xs="4">
        <MudTextField @bind-Value="treatmentID" Label="Treatment Code" Variant="Variant.Filled" HelperText="Please enter the code of the treatment" MaxLength="25" Counter="25" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"></MudTextField>
    </MudItem>
    <MudItem xs="4">
        <MudTextField @bind-Value="treatmentName" Label="Treatment Name" Variant="Variant.Filled" HelperText="Please enter the name of the treatment" MaxLength="25" Counter="25" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"></MudTextField>
    </MudItem>
    <MudItem xs="4">
        <MudTextField @bind-Value="treatmentDescription" Label="Treatment Description" Variant="Variant.Filled" HelperText="Please enter description" MaxLength="25" Counter="25" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"></MudTextField>
    </MudItem>
    <MudItem xs="12">
        <MudExpansionPanel style="max-height:1000px; overflow: auto;" Text="Treatment Provider Details">
                    <MudExpansionPanels class="accordion-body">
                        @foreach (MedicalServiceProvider provider in MedicalProviderElements)
                        {
                        string text = $"Provider ID: {provider.PolicyProviderID}";
                            <MudGrid>
                                <MudItem xs="9">
                                    <MudExpansionPanel Text="@text">
                                        <MudCard class="mt-2 p-2">
                                            <MudText Align="Align.Center"> Name: @provider.PolicyProviderName </MudText>
                                            <MudText Align="Align.Center"> Email: @provider.PolicyProviderEmail </MudText>
                                        </MudCard>
                                        <MudText Align="Align.Center">
                                            <MudSelect @bind-Value="selectedStatus" T="string" Label="Status" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                                @foreach (string status in @statusses)
                                                {
                                                    <MudSelectItem T="string" Value="status"></MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudText>
                                    </MudExpansionPanel>
                                </MudItem>
                                
                                <MudItem xs="3">
                                    <MudText Align="Align.Center">
                                        @if (selectedProviders.Contains(provider))
                                        {
                                            <MudButton OnClick="()=>removeProvider(provider,selectedStatus)" Color="Color.Error">Remove</MudButton>
                                        }
                                        else
                                        {
                                            <MudButton OnClick="()=>addProvider(provider,selectedStatus)" Color="Color.Success">Add</MudButton>
                                        }
                                    </MudText>
                                </MudItem>
                            </MudGrid>

                        }
                    </MudExpansionPanels>
            </MudExpansionPanel>

    </MudItem>
    <MudItem xs="12">
            <MudButton OnClick="addTreatment" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Style="margin-top:1%">Add new treatment</MudButton>

    </MudItem>

</MudGrid>




@code {
    public string treatmentName { get; set; }
    public string treatmentID { get; set; }
    public string treatmentDescription { get; set; }
    private string searchMedicalServiceProvider = "";
    private MedicalServiceProviderTreatment selectedMedical = null;
    private Treatment originalTreatment;
    private Treatment newTreatment = new Treatment();

    private List<MedicalServiceProvider> MedicalProviderElements = new List<MedicalServiceProvider>();
    private List<MedicalServiceProviderTreatment> selectedProvidersTreatment = new List<MedicalServiceProviderTreatment>();
    private List<MedicalServiceProvider> selectedProviders = new List<MedicalServiceProvider>();
    private List<string> statusses = new List<string>() {"Standard","Prefered","BlackListed" };
    private string selectedStatus="Standard";

    protected async override Task OnInitializedAsync()
    {
        //get list of providers
        await new MedicalServiceProviderService().getProviders(1000, 1).ContinueWith((x)=>{
            MedicalProviderElements = x.Result;
        });
    }

    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return "Max 25 characters";
    }
    public MedicalServiceProvider displayDetails()
    {
        MedicalServiceProvider selected = new MedicalServiceProvider(selectedMedical.MedicalServiceProvidor.PolicyProviderID, selectedMedical.MedicalServiceProvidor.PolicyProviderName, selectedMedical.MedicalServiceProvidor.PolicyProviderAddresses, selectedMedical.MedicalServiceProvidor.PolicyProviderEmail, selectedMedical.MedicalServiceProvidor.PolicProviderPhone);
        return selected;

    }

    public void addTreatment(){
        newTreatment.TreatmentDescription = treatmentDescription;
        newTreatment.TreatmentID = treatmentID;
        newTreatment.TreatmentName=treatmentName;
        newTreatment.MedicalServiceProviderTreatments = selectedProvidersTreatment;

        new TreatmentService().addTreatment(newTreatment).ContinueWith((x)=>{
            string message = "";
            message = x.Result != null ? "Treatment Created successfilly" : "Treatment could not be created";
            showDialog(message);
        });
    }

    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Treatment", paramaters, options).Result;
            if (message != "Treatment could not be created")
            {
                navigate.NavigateTo("/Treatment");
            }
        });
    }

    private void addProvider(MedicalServiceProvider mspt,string status){
        selectedProvidersTreatment.Add(new MedicalServiceProviderTreatment(0,status,mspt));
        selectedProviders.Add(mspt);
    }
    private void removeProvider(MedicalServiceProvider mspt, string status)
    {
        selectedProvidersTreatment= selectedProvidersTreatment.Where((x)=>!x.MedicalServiceProvidor.Equals(mspt)).ToList();
        selectedProviders.Remove(mspt);
    }

}

