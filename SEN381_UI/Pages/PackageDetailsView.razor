@using SEN381_UI.Data
@using SEN381_UI.Shared.MockData
@page "/Packages/{id}"
@inject NavigationManager navigation
@inject IDialogService DialogService

<MudCard style="max-height:1000px; overflow: auto;">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5" Align="Align.Center">Package Details</MudText>
        </CardHeaderContent>
        <CardHeaderAvatar>
            <MudIconButton OnClick="@navigateBack" Icon="@Icons.Filled.KeyboardBackspace"></MudIconButton>
        </CardHeaderAvatar>
    </MudCardHeader>

    <MudForm Class="p-5">
            <MudGrid>
            @*Policy Basic Details*@
                <MudItem xs="6">
                     <MudTextField T="string" Label="Pacakge ID" ReadOnly="true" Text="@id"></MudTextField>
                </MudItem>
                <MudItem xs="6" sm="6">
                    <MudDateRangePicker Label="Package Availability Dates" @bind-DateRange="_dateRange"></MudDateRangePicker>
                </MudItem>

            
            @*Treatment Coverage Details *@
            <MudItem lg="12">
                <MudExpansionPanels class="accordion-body">
                    @foreach (Treatment treat in dicTreatCov.Keys.ToList())
                    {
                        string text = $"Treatment ID: {treat.TreatmentID}";

                        <MudGrid>
                            <MudItem xs="9">
                                <MudExpansionPanel Text="@text">
                                    <MudCard class="mt-2 p-2">
                                        <MudText Align="Align.Center"> Name: @treat.TreatmentName </MudText>
                                        <MudText Align="Align.Center"> Description: @treat.TreatmentDescription </MudText>
                                    </MudCard>
                                    <MudText Align="Align.Center">
                                        <MudSelect @bind-Value="dicTreatCov[treat]" T="Coverage" Label="Coverage Level" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Text="@dicTreatCov[treat].CoverageDescription">
                                            @foreach (Coverage cov in coverages)
                                            {
                                                <MudSelectItem T="Coverage" Value="cov">@cov.CoverageDescription</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudText>
                                </MudExpansionPanel>

                            </MudItem>

                            <MudItem xs="3">
                                <MudText Align="Align.Center">
                                    @if (selectedPTC.Where((x) => x.Treatment.TreatmentID == treat.TreatmentID).ToList().Count != 0)
                                    {
                                        <MudButton OnClick="()=>removePCT(treat)" Variant="Variant.Filled" Color="Color.Error">Remove</MudButton>
                                    }
                                    else
                                    {
                                        <MudButton OnClick="()=>addPCT(treat)" Variant="Variant.Filled" Color="Color.Success">Add</MudButton>
                                    }
                                </MudText>
                            </MudItem>
                        </MudGrid>

                    }
                </MudExpansionPanels>
            </MudItem>

                <MudItem xs="6" sm="6">
                    <MudButton>Cancel Changes</MudButton>
                </MudItem>
                <MudItem xs="6" sm="6">
                <MudButton OnClick="updatePackage">Save Changes</MudButton>
                </MudItem>
            </MudGrid>
    </MudForm>

</MudCard>


@code {

    [Parameter]
    public string? id { get; set; }
    List<Package> packages = new List<Package>();
    List<Treatment> treatments = new List<Treatment>();
    List<Coverage> coverages = new List<Coverage>();
    Dictionary<Treatment, Coverage> dicTreatCov = new Dictionary<Treatment, Coverage>();

    List<PackageTreatmentCoverage> selectedPTC = new List<PackageTreatmentCoverage>();
    Package originalPackage;


    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);//Used for date picker

    protected async override Task OnInitializedAsync()
    {

        await new TreatmentService().getTreatments(1000, 1).ContinueWith((x) =>
        {
            treatments = x.Result != null ? x.Result : treatments;
        });

        await new CoverageService().getCoverages(1000, 1).ContinueWith((x) =>
        {
            coverages = x.Result != null ? x.Result : coverages;
        });

        foreach (Treatment treat in treatments)
        {
            dicTreatCov.Add(treat, new Coverage());
        }

        await new PackageService().getPacakgeDetails(id).ContinueWith((x)=>{
            originalPackage = x.Result;
            selectedPTC = new List<PackageTreatmentCoverage>(x.Result.TreatmentCoverages);
        });

    }

    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Package", paramaters, options).Result;
            if (message != "Package could not be created")
            {
                navigation.NavigateTo("/Packages");
            }
        });
    }

    public void updatePackage()
    {
        new PackageService().updatePackage(new Package("0", _dateRange.Start, _dateRange.End, selectedPTC.Count != 0 ? selectedPTC : new List<PackageTreatmentCoverage>())).ContinueWith((x) =>
        {
            string message = "";
            message = x.Result != null ? "Package Created successfilly" : "Package could not be created";
            showDialog(message);
        });
    }

    private void resetPackage()
    {
        _dateRange.Start = originalPackage.PackageStartDate;
        _dateRange.End = originalPackage.PackageEndDate;
        selectedPTC = originalPackage.TreatmentCoverages;

    }

    private void addPCT(Treatment treat)
    {
        selectedPTC.Add(new PackageTreatmentCoverage(treat, dicTreatCov[treat]));
    }

    private void removePCT(Treatment treat)
    {
        selectedPTC = selectedPTC.Where((x) => !x.Treatment.Equals(treat)).ToList();
    }

    public void navigateBack(){
        navigation.NavigateTo("/Packages");
    }
}
