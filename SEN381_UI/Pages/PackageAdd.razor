@page "/PackagesAdd"
@inject NavigationManager UriHelper
@inject IDialogService DialogService
<h3>Create Package</h3>


<MudGrid>

    <MudItem lg="12" sm="6">
        <MudDateRangePicker Label="Package Availability Dates" @bind-DateRange="_dateRange"></MudDateRangePicker>
    </MudItem>
    @*Treatments*@
    <MudItem xs="6" sm="6">
        <MudExpansionPanels class="accordion-body">
            @foreach (Treatment treat in dicTreatCov.Keys.ToList())
            {
                string text = $"Treatment ID: {treat.TreatmentID}";
                
                <MudGrid>
                    <MudItem xs="9">
                        <MudExpansionPanel Text="@text">
                            <MudCard class="mt-2 p-2">
                                <MudText Align="Align.Center"> Name: @treat.TreatmentName </MudText>
                                <MudText Align="Align.Center"> Description: @treat.TreatmentDescription </MudText>
                            </MudCard>
                            <MudText Align="Align.Center">
                                <MudSelect @bind-Value="dicTreatCov[treat]" T="Coverage" Label="Coverage Level" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Text="@dicTreatCov[treat].CoverageDescription">
                                    @foreach (Coverage cov in coverages)
                                    {
                                        <MudSelectItem T="Coverage" Value="cov">@cov.CoverageDescription</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudText>
                        </MudExpansionPanel>

                    </MudItem>

                    <MudItem xs="3">
                        <MudText Align="Align.Center">
                            @if (selectedPTC.Where((x)=>x.Treatment.TreatmentID==treat.TreatmentID).ToList().Count != 0)
                            {
                                <MudButton OnClick="()=>removePCT(treat)" Variant="Variant.Filled" Color="Color.Error">Remove</MudButton>
                            }
                            else
                            {
                                <MudButton OnClick="()=>addPCT(treat)" Variant="Variant.Filled" Color="Color.Success">Add</MudButton>
                            }
                        </MudText>
                    </MudItem>
                </MudGrid>

            }
        </MudExpansionPanels>
    </MudItem>

    @*Coverages*@
    <MudItem xs="6" sm="6">

    </MudItem>
</MudGrid>

<MudButton OnClick="createPackage" Variant="Variant.Filled" Color="Color.Primary">Create Package</MudButton>

@code {
    List<Treatment> treatments = new List<Treatment>();
    List<Coverage> coverages = new List<Coverage>();
    Dictionary<Treatment, Coverage> dicTreatCov = new Dictionary<Treatment, Coverage>();

    List<PackageTreatmentCoverage> selectedPTC = new List<PackageTreatmentCoverage>();

    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);//Used for date picker

    protected async override Task OnInitializedAsync(){

        await new TreatmentService().getTreatments(1000, 1).ContinueWith((x)=>{
            treatments = x.Result != null ? x.Result :treatments;
        }) ;

        await new CoverageService().getCoverages(1000, 1).ContinueWith((x) =>
        {
            coverages = x.Result != null ? x.Result : coverages;
        });

        foreach (Treatment treat in treatments)
        {
            dicTreatCov.Add(treat, new Coverage());
        }

    }

    public void navigateBack()
    {
        UriHelper.NavigateTo($"/Packages");
    }

    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Package", paramaters, options).Result;
            if (message != "Package could not be created")
            {
                UriHelper.NavigateTo("/Packages");
            }
        });
    }

    public void createPackage()
    {
        new PackageService().addPackage(new Package("0", _dateRange.Start, _dateRange.End, selectedPTC.Count != 0 ? selectedPTC:new List<PackageTreatmentCoverage>())).ContinueWith((x) =>
        {
            string message = "";
            message = x.Result != null ? "Package Created successfilly" : "Package could not be created";
            showDialog(message);
        });
    }

    private void addPCT(Treatment treat)
    {
        selectedPTC.Add(new PackageTreatmentCoverage(treat,dicTreatCov[treat]));
    }

    private void removePCT(Treatment treat)
    {
        selectedPTC = selectedPTC.Where((x) => !x.Treatment.Equals(treat)).ToList();
    }

}
