@page "/MedicalServiceProvider/{id}"
@using System.ComponentModel.DataAnnotations

@inject NavigationManager navigation
@inject IDialogService DialogService

<h3>MSP Detailed View</h3>
<MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%" Href="/MedicalServiceProvider">Back</MudIconButton>
<MudGrid>
    <MudItem xs="6" sm="6">
        <MudTextField T="string" Label="Provider ID" ReadOnly="true" Text="@id" Variant="Variant.Outlined"></MudTextField>
    </MudItem>
    <MudItem xs="6" sm="6">
        <MudTextField T="string" Label="Name" @bind-Value="@providerName" HelperText="@Val_string" Style="@nameColour"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="string" Label="Address" @bind-Value="providerAddress" HelperText="@Val_Address" Style="@AddressColour"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="string" Label="Email" @bind-Value="Email" HelperText="@Val_Email" Style="@EmailColour"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField T="string" Label="Phone number" MaxLength="10" @bind-Value="providerPhone " HelperText="@Val_Phone" Style="@PhoneColour"></MudTextField>
    </MudItem>
</MudGrid>

<MudGrid Style="margin-top:auto">
    <MudItem xs="12" sm="6">
        <MudButton OnClick="@resetProvider" Variant="Variant.Outlined" Color="Color.Secondary" FullWidth="true">Cancel Changes</MudButton>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudButton OnClick="@updateProvider" Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true">Save Changes</MudButton>
    </MudItem>
</MudGrid>
@code {
    private string nameColour = "";
    private string Val_string = "";
    private string PhoneColour = "";
    private string Val_Phone = "";
    private string AddressColour = "";
    private string Val_Address = "";
    private string EmailColour = "";
    private string Val_Email = "";
    [Parameter]
    public string? id { get; set; }

    public string providerName { get; set; }
    public string providerAddress { get; set; }

    [EmailAddress]
    public string Email { get; set; }
    public string providerPhone { get; set; }

    private MedicalServiceProvider originalProvider = new MedicalServiceProvider();
    private MedicalServiceProvider newProvider = new MedicalServiceProvider();

    protected async override Task OnInitializedAsync(){
        await new MedicalServiceProviderService().getProviderDetails(id).ContinueWith((x)=>{
            originalProvider = new MedicalServiceProvider(x.Result.PolicyProviderID, x.Result.PolicyProviderName, x.Result.PolicyProviderAddresses, x.Result.PolicyProviderEmail, x.Result.PolicProviderPhone);
            providerName= x.Result.PolicyProviderName;
            providerAddress = x.Result.PolicyProviderAddresses;
            Email = x.Result.PolicyProviderEmail;
            providerPhone = x.Result.PolicProviderPhone;
        });
    }

    private void updateProvider()
    {
        if (ValidateName(providerName) && ValidateAddress(providerAddress) && ValidatePhonenumber(providerPhone))
        {
            newProvider = new MedicalServiceProvider(id, providerName, providerAddress, Email, providerPhone);
            new MedicalServiceProviderService().updateProvider(newProvider).ContinueWith((x) =>
            {
                string message = "";
                message = x.Result != null ? "Provider Updated successfully" : "Provider could not be updated";
                showDialog(message);
            });
        }

    }

    private void resetProvider()
    {
        newProvider = new MedicalServiceProvider(id, originalProvider.PolicyProviderName, originalProvider.PolicyProviderAddresses, originalProvider.PolicyProviderEmail, originalProvider.PolicProviderPhone);
        providerName = originalProvider.PolicyProviderName;
        providerAddress = originalProvider.PolicyProviderAddresses;
        Email = originalProvider.PolicyProviderEmail;
        providerPhone = originalProvider.PolicProviderPhone;
    }

    private void navigateBack()
    {
        navigation.NavigateTo("/MedicalServiceProvider");
    }

    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Medical Service Provider", paramaters, options).Result;
        });
    }
    public bool ValidateName(string name)
    {
        Validation validation = new Validation();

        if (validation.StringOnly(name) == false)
        {
            nameColour = "color:red";
            Val_string = "The Name contains invalid characters.";
            return false;
        }
        else
        {
            nameColour = "color:black";
            Val_string = "";
            return true;
        }
    }
    public bool ValidatePhonenumber(string phone)
    {
        Validation validation = new Validation();

        if (validation.numberOnlu(phone) == false)
        {
            PhoneColour = "color:red;border-bottom:red;margin-bottom:red";
            Val_Phone = "Invalid phone number.";
            return false;
        }
        else
        {
            PhoneColour = "color:black";
            Val_Phone = "";
            return true;
        }
    }
    public bool ValidateAddress(string address)
    {
        Validation validation = new Validation();

        if (validation.AddressFormat(address) == false)
        {
            AddressColour = "color:red;border-bottom:red;margin-bottom:red";
            Val_Address = "Wrong address format.";
            return false;
        }
        else
        {
            AddressColour = "color:black";
            Val_Address = "";
            return true;
        }
    }
    public bool ValidateEmail(string email)
    {
        Validation validation = new Validation();

        if (validation.EmailFormat(email) == false)
        {
            AddressColour = "color:red;border-bottom:red;margin-bottom:red";
            Val_Address = "Wrong email format.";
            return false;
        }
        else
        {
            AddressColour = "color:black";
            Val_Address = "";
            return true;
        }
    }

}
