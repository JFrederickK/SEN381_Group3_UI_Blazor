@page "/ClientAddView"
@using System.ComponentModel.DataAnnotations 
@inject NavigationManager UriHelper
@inject IDialogService DialogService


<h3>Client Add View</h3>
<MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%" Href="/Client">Back</MudIconButton>
<EditForm Model="@postdata" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
    <MudItem xs="6" sm="6">
            <MudTextField T="string" Label="Name" @bind-Value=postdata.ClientName  Immediate="true" For="@(()=> postdata.ClientName)"></MudTextField>
    </MudItem>
    <MudItem xs="6" sm="6">
            <MudTextField T="string" Label="Surname" @bind-Value=postdata.ClientSurname Immediate="true"  For="@(()=> postdata.ClientSurname)"></MudTextField>
    </MudItem> 

    <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Address" @bind-Value=postdata.ClientAddress For="@(()=> postdata.ClientAddress)"></MudTextField>
    </MudItem>

    <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Email" @bind-Value=postdata.ClientEmail For="@(()=> postdata.ClientEmail)" Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"></MudTextField>
    </MudItem>
    <MudItem xs="6" sm="6">
            <MudTextField T="string" Label="Phone number" MaxLength="10" @bind-Value=postdata.ClientPhoneNumber For="@(()=> postdata.ClientPhoneNumber)"></MudTextField>
    </MudItem>

    <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Status" @bind-Value=postdata.ClientStatus For="@(()=> postdata.ClientStatus)"></MudTextField>
    </MudItem>

    <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Notes" @bind-Value=postdata.ClientAdHocNotes> For="@(() => postdata.ClientAdHocNotes)"</MudTextField>
    </MudItem>

</MudGrid>

<MudGrid>
        @*Treatment Details *@
        <MudItem lg="12">
            <MudExpansionPanel class="h-25" Text="List of Policies">
                <MudGrid>
                    @*Policy *@
                    <MudItem xs="6">
                        <MudExpansionPanels style="max-height:400px; overflow: auto;" class="accordion-body">
                            @foreach (Policy policy in policies)
                            {
                                string text = $"Policy ID: {@policy.PolicyId}";
                                <MudExpansionPanel Text="@text">
                                    <MudText> Policy Name: @policy.PolicyName </MudText>
                                    <MudText> Policy Status: @policy.PolicyStatus </MudText>
                                </MudExpansionPanel>
                                <MudButton OnClick="()=>addPolicy(policy)" Color="Color.Success"> Make Active Policy</MudButton>
                            }
                        </MudExpansionPanels>
                    </MudItem>
                    @*Selected Policy*@
                    <MudItem xs="6">
                        <MudCard class="align-content-center">
                            <MudCardHeader class="justify-content-center">
                                Active Policy
                            </MudCardHeader>
                            @if (selectedPolicy != null)
                            {
                                <MudCardContent class="justify-content-center">
                                    <MudText class="justify-content-center"> Policy Name: @selectedPolicy.PolicyName </MudText>
                                    <MudText class="justify-content-center"> Policy Status: @selectedPolicy.PolicyStatus </MudText>
                                </MudCardContent>
                                <MudCardActions class="justify-content-center">
                                    <MudButton OnClick="()=>removePolicy(selectedPolicy)" Color="Color.Error"> Remove Policy</MudButton>
                                </MudCardActions>
                            }
                            else
                            {
                                <MudCardContent>
                                    Client does not have any active policies
                                </MudCardContent>
                            }
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudExpansionPanel>
        </MudItem>
</MudGrid>


<MudGrid Style="margin-top:auto">
    <MudItem xs="12" sm="6">
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" FullWidth="true" OnClick="@cancel">Cancel Changes</MudButton>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true" ButtonType="ButtonType.Submit" Class="ml-auto">Save Changes</MudButton>
    </MudItem>
</MudGrid>
</EditForm>


@code {
    private Client postdata = new();
    private string id = "";

    private string name { get; set; }
    private string surname { get; set; }
    private string address { get; set; }


    private string email { get; set; }
    private string phonenumber { get; set; }

    private ClientPolicy? clientPolicy { get; set; }

    private Policy? selectedPolicy;

    private string status { get; set; }

    private string notes { get; set; }

    public List<Policy> policies = new List<Policy>();
    bool success;

    protected async override Task OnInitializedAsync(){
        await LoadPolicies();
    }

    private async Task LoadPolicies()
    {
        await new PolicyService().getPolicies(1000, 1).ContinueWith((x) =>
        {
            if (x.Result != null) policies = x.Result;
        });
    }

    private async void saveClint()
    {
        if (selectedPolicy == null) clientPolicy = new ClientPolicy(null,null,null);
        else clientPolicy = new ClientPolicy(selectedPolicy.PolicyId, selectedPolicy.PolicyName, selectedPolicy.PolicyStatus);

        Client newClient = new Client(id, postdata.ClientName, postdata.ClientSurname, postdata.ClientAddress, postdata.ClientEmail, postdata.ClientPhoneNumber, clientPolicy, postdata.ClientStatus, postdata.ClientAdHocNotes);
        await new ClientService().postClientDetails(newClient).ContinueWith((x) =>
        {
            string message = "";
            message = x.Result != null ? "Client was successfully created" : "Client could not be created";
            showDialog(message);
        });
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        if (success)
        {
            saveClint();  
        }
        StateHasChanged();
    }
    private void cancel()
    {
        UriHelper.NavigateTo("/Client");
    }
    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Client", paramaters, options).Result;
            if (message != "Client could not be created")
            {
                UriHelper.NavigateTo("/Client");
            }
        });
    }

    private void removePolicy(Policy pol)
    {
        policies.Add(pol);
        selectedPolicy = null;
    }

    private void addPolicy(Policy pol)
    {
        if (selectedPolicy != null) policies.Add(selectedPolicy);
        policies.Remove(pol);
        selectedPolicy = pol;
    }
    private IEnumerable<string> MaxCharacters(string ch)
    {
        
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length && ch.All(Char.IsLetter))
            yield return "Max 25 characters, Or make sure that is is only letters";
    }
}