@page "/ClientAddView"
@using System.ComponentModel.DataAnnotations 
@using SEN381_UI.Data
@using SEN381_UI.Shared.MockData


<h3>Client Add View</h3>
<MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%" Href="/ClientListView">Back</MudIconButton>
<MudGrid>

    <MudItem xs="6" sm="6">
        <MudTextField T="string" Label="Client ID" ReadOnly="true" Text="@clientId" Variant="Variant.Outlined"></MudTextField>
    </MudItem>

    <MudItem xs="6" sm="6">
        <MudTextField T="string" Label="Name" ReadOnly="true" @bind-Value="clientName"></MudTextField>
    </MudItem>

    <MudItem xs="6" sm="6">
        <MudTextField T="string" Label="Surname" ReadOnly="true" @bind-Value="clientSurname"></MudTextField>
    </MudItem>

    <MudItem xs="12" sm="6">
        <MudTextField T="string" Label="Status" @bind-Value="clientStatus"></MudTextField>
    </MudItem>

    <MudItem xs="12" sm="6">
        <MudTextField T="string" Label="Phone number" MaxLength="10" @bind-Value="clientPolicies"></MudTextField>
    </MudItem>

</MudGrid>

<MudGrid>
    @*Different Packages*@
            <MudItem lg="12" sm="6">
                <MudExpansionPanel class="h-25" Text="Policy Packages">

                    <MudExpansionPanels style="max-height:400px; overflow: auto;" class="accordion-body">
                        @foreach (Package package in packages)
                        {
                            string text = $"Package ID:{@package.PackageID}";
                            <MudGrid>
                                <MudItem xs="9">
                                    <MudExpansionPanel Text="@text">
                                        @foreach (PackageTreatmentCoverage item in package.TreatmentCoverages)
                                        {

                                            <MudCard class="mt-2 p-2">
                                                <MudText Align="Align.Center"> Treatment: @item.Treatment.TreatmentName </MudText>
                                                <MudText Align="Align.Center"> Coverage Level: @item.Coverage.CoverageDescription </MudText>
                                            </MudCard>

                                        }

                                    </MudExpansionPanel>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudText Align="Align.Center">
                                        <MudCheckBox @bind-Checked="@Basic_CheckBox1"></MudCheckBox>
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        }
                    </MudExpansionPanels>
                </MudExpansionPanel>
            </MudItem>
</MudGrid>


<MudGrid Style="margin-top:auto">
    <MudItem xs="12" sm="6">
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" FullWidth="true">Cancel Changes</MudButton>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true">Save Changes</MudButton>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string? clientId { get; set; }

    public string? clientName { get; set; }

    public string? clientSurname { get; set; }

    public string? clientStatus { get; set; }

    public string? clientPolicies { get; set; }

    public bool Basic_CheckBox1 = true;

    public List<Package> packages = new PackageMock().getPackages();


    protected override void OnInitialized()
    {
        TreatmentsElements = new TreatmentMock().GetTreatments();

    }
    private string searchTreatment = "";
    private Treatment selectedTreatment = null;
    private HashSet<Treatment> selectedTreatments = new HashSet<Treatment>();

    private IEnumerable<Treatment> TreatmentsElements = new List<Treatment>();
    private bool FilterTreatment(Treatment element) => FilterTreatment(element, searchTreatment);

    private bool FilterTreatment(Treatment element, string searchMedical)
    {

        if (string.IsNullOrWhiteSpace(searchMedical))
            return true;
        if (element.TreatmentID.Contains(searchMedical, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.TreatmentName.Contains(searchMedical, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.TreatmentID} {element.TreatmentName}".Contains(searchTreatment))
            return true;
        return false;
    }

    public Treatment displayDetails()
    {
        Treatment selected = new Treatment(selectedTreatment.TreatmentID, selectedTreatment.TreatmentName, selectedTreatment.TreatmentDescription, selectedTreatment.MedicalServiceProviderTreatments);
        return selected;

    }
}
