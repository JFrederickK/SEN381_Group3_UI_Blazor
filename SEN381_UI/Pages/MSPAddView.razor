@page "/MSPAddView"
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@inject NavigationManager navigate;

<h3>Create Medical service Provider</h3>
<MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%" Href="/MedicalServiceProvider">Back</MudIconButton>
<EditForm Model="@provider" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary/>
    <MudGrid>
        <MudItem xs="6" sm="6">
            <MudTextField T="string" Label="Name" @bind-Value="@provider.PolicyProviderName" For="@(()=> provider.PolicyProviderName)" Immediate="true"></MudTextField>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Address" @bind-Value="@provider.PolicyProviderAddresses" For="@(()=> provider.PolicyProviderAddresses)" Immediate="true"></MudTextField>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Email" @bind-Value="@provider.PolicyProviderEmail" For="@(()=> provider.PolicyProviderEmail)" Immediate="true"></MudTextField>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Phone number" MaxLength="10" @bind-Value="@provider.PolicProviderPhone" For="@(()=> provider.PolicProviderPhone)" Immediate="true"></MudTextField>
        </MudItem>
    </MudGrid>

</EditForm>


<MudGrid Style="margin-top:auto">
    <MudItem xs="12" sm="6">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true" ButtonType="ButtonType.Submit">Create Provider</MudButton>
    </MudItem>
</MudGrid>
@code {
    MedicalServiceProvider provider = new();
    bool success;

    private async void insertProvider(){
        MedicalServiceProvider newProvider = new MedicalServiceProvider("temp", provider.PolicyProviderName, provider.PolicyProviderAddresses, provider.PolicyProviderEmail, provider.PolicProviderPhone);
        await new MedicalServiceProviderService().addProvider(newProvider).ContinueWith((x) =>
        {
            string message = x.Result!=null ?"Provider created sucessfully":"Provider could not be created";
            showDialog(message);
        });
    }


    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Medical Service Provider", paramaters, options).Result;
            if (message != "Provider could not be created")
            {
                navigate.NavigateTo("/MedicalServiceProvider");
            }
        });
    }
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        if (success)
        {
            insertProvider();
        }
    }
}
