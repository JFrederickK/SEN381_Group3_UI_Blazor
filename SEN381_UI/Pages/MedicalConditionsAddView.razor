@page "/MedicalConditionAdd"

@using SEN381_API_GROUP3.shared.models
@using SEN381_UI.Data
@using SEN381_UI.Shared.MockData
@inject NavigationManager UriHelper
@inject IDialogService DialogService

@if (load)
{
    <MudCard style="max-height:1000px; overflow: auto;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Align="Align.Center">Create Medical Condition</MudText>
            </CardHeaderContent>
            <CardHeaderAvatar>
                <MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%" Href="/MedicalConditions">Back</MudIconButton>
            </CardHeaderAvatar>
        </MudCardHeader>
        <MudForm Class="p-5">
            <MudGrid>
                <MudItem lg="12" sm="6">
                    <MudTextField T="string" Label="Medical Condition Name" @bind-Value=@mcName ></MudTextField>
                    <MudTextField T="string" Label="Medical Condition Description" @bind-Value=@mcDescription ></MudTextField>
                </MudItem>

                @*Different Treatments*@
                <MudItem lg="12" sm="6">
                    <MudExpansionPanel class="h-25" Text="Policy Packages">

                        <MudExpansionPanels style="max-height:400px; overflow: auto;" class="accordion-body">
                            @foreach (MedicalConditionTreatment treatment in treatments)
                            {
                                string text = $"Treatment ID:{@treatment.TreatmentID}";
                                <MudGrid>
                                    <MudItem xs="9">
                                        <MudExpansionPanel Text="@text">
                                            <MudCard>
                                                <MudText>Name: @treatment.TreatmentName</MudText>
                                                <MudText>Description: @treatment.TreatmentDescription</MudText>
                                            </MudCard>

                                        </MudExpansionPanel>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudText Align="Align.Center">
                                            <MudCheckBox @bind-Checked="@Basic_CheckBox1"></MudCheckBox>
                                        </MudText>
                                    </MudItem>
                                </MudGrid>
                            }
                        </MudExpansionPanels>
                    </MudExpansionPanel>
                </MudItem>
                </MudGrid>
                <MudGrid Style="margin-top:auto">
                    <MudItem xs="12" sm="6">
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" FullWidth="true" OnClick="@cancel">Cancel Changes</MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true" OnClick="@saveMedical" ButtonType="ButtonType.Submit" Class="ml-auto">Save Changes</MudButton>
                    </MudItem>
            </MudGrid>
        </MudForm>

    </MudCard>
}


@code {


    private string mcName { get; set; }
    private string mcDescription { get; set; }

    private bool load = false;

    List<MedicalConditionTreatment> treatments = new List<MedicalConditionTreatment>();//Replace with service
    public bool Basic_CheckBox1 { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTreatments();
        load = true;
    }

    private async Task LoadTreatments() {
        MedicalConditionService cs = new MedicalConditionService();
        await cs.LoadMedicalConditionTreatment().ContinueWith((x) =>
        {

            treatments = x.Result;
        });
    }
    private async void saveMedical()
    {
        MedicalCondition newMedicalCondition = new MedicalCondition(0, mcName, mcDescription);
        await new MedicalConditionService().postMedicalConditionDetails(newMedicalCondition).ContinueWith((x) =>
        {
            Console.WriteLine(newMedicalCondition.MedicalConditionName);
            string message = "";
            message = x.Result != null ? "Medical Condition is successfully created" : "Medical Condition could not be created";
            showDialog(message);
        });
    }

    private void navigateBack()
    {
        UriHelper.NavigateTo("/MedicalConditions");
    }
    private void cancel()
    {
        UriHelper.NavigateTo("/MedicalConditions");
    }
    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Medical Conditions", paramaters, options).Result;
            if (message != "Medical Conditions could not be created")
            {
                UriHelper.NavigateTo("/MedicalConditions");
            }
        });
    }
}
