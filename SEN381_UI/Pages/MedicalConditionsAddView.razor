@page "/MedicalConditionAdd"

@using SEN381_API_GROUP3.shared.models
@using SEN381_UI.Data
@using SEN381_UI.Shared.MockData
@inject NavigationManager UriHelper
@inject IDialogService DialogService

@if (load)
{
    <MudCard style="max-height:1000px; overflow: auto;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Align="Align.Center">Create Medical Condition</MudText>
            </CardHeaderContent>
            <CardHeaderAvatar>
                <MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%" Href="/MedicalConditions">Back</MudIconButton>
            </CardHeaderAvatar>
        </MudCardHeader>
        <MudForm Class="p-5">
            <MudGrid>
                <MudItem lg="12" sm="6">
                    <MudTextField T="string" Label="Medical Condition Name" @bind-Value=@mcName ></MudTextField>
                    <MudTextField T="string" Label="Medical Condition Description" @bind-Value=@mcDescription ></MudTextField>
                </MudItem>

                @*Different Treatments*@
                <MudItem xs="12" sm="12">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudTable Style="border-radius:2%;margin-top:1%" Items="@medicalConditionT" Hover="true" Bordered="true" Striped="true" Filter="new Func<MedicalConditionTreatment,bool>(FilterFunc)" @bind-SelectedItems="selectedItems"
                                  MultiSelection="true">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">Treatments</MudText>
                                    <MudSpacer />
                                    <MudTextField @bind-Value="searchString" Placeholder="Search for treatment" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh>Condition Name</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Condition Name">@context.TreatmentName</MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="pageSizeOptions" />
                                </PagerContent>

                            </MudTable>
                        </MudItem>
                            <MudItem xs="6">
                            <u><h4 style="text-align:center;">Items selected</h4></u>
                            <MudExpansionPanels>
                                    @foreach (MedicalConditionTreatment treatment in selectedItems)
                                    {
                                        string text = $"Treatment ID:{@treatment.TreatmentID}";
                                        <MudGrid>
                                            <MudItem xs="12">
                                                <MudExpansionPanel Text="@text">
                                                    <MudCard>
                                                        <MudText>Name: @treatment.TreatmentName</MudText>
                                                        <MudText>Description: @treatment.TreatmentDescription</MudText>
                                                    </MudCard>

                                                </MudExpansionPanel>
                                            </MudItem>
                                        </MudGrid>
                                    }
                                </MudExpansionPanels>

                            </MudItem>
                    </MudGrid>
                </MudItem>
                </MudGrid>
                <MudGrid Style="margin-top:auto">
                    <MudItem xs="12" sm="6">
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" FullWidth="true" OnClick="@cancel">Cancel Changes</MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" FullWidth="true" OnClick="@saveMedical" ButtonType="ButtonType.Submit" Class="ml-auto">Save Changes</MudButton>
                    </MudItem>
            </MudGrid>
        </MudForm>

    </MudCard>
}


@code {
    private HashSet<MedicalConditionTreatment> selectedItems = new HashSet<MedicalConditionTreatment>();
    private List<string> selectedItemIDs = new List<string>();
    public List<MedicalConditionTreatment> medicalConditionT = new List<MedicalConditionTreatment>();
    private string mcName { get; set; }
    private string mcDescription { get; set; }
    private string searchString = "";
    private bool load = false;
    private int[] pageSizeOptions = new int[] { 5, 10, 15 };
    private MedicalConditionTreatment selectedItem = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadTreatments();
        load = true;
    }

    private async Task LoadTreatments() {
        MedicalConditionService cs = new MedicalConditionService();
        await cs.LoadMedicalConditionTreatment().ContinueWith((x) =>
        {

            medicalConditionT = x.Result;
        });
    }
    private async void saveMedical()
    {
        foreach (MedicalConditionTreatment item in selectedItems)
        {
            selectedItemIDs.Add(item.TreatmentID);
        }
        InsertMedicalConditionRequest newMedicalCondition = new InsertMedicalConditionRequest(mcName, mcDescription, selectedItemIDs, selectedItemIDs.Count);
        await new MedicalConditionService().postMedicalConditionDetails(newMedicalCondition).ContinueWith((x) =>
        {
            string message = "";
            message = x.Result != false ? "Medical Condition is successfully created" : "Medical Condition could not be created";
            showDialog(message);
        });
    }

    private void navigateBack()
    {
        UriHelper.NavigateTo("/MedicalConditions");
    }
    private void cancel()
    {
        UriHelper.NavigateTo("/MedicalConditions");
    }
    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Medical Conditions", paramaters, options).Result;
            if (message != "Medical Conditions could not be created")
            {
                UriHelper.NavigateTo("/MedicalConditions");
            }
        });
    }
    private bool FilterFunc(MedicalConditionTreatment element) => FilterFunc(element, searchString);

    private bool FilterFunc(MedicalConditionTreatment element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.TreatmentID.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;

    }
}
