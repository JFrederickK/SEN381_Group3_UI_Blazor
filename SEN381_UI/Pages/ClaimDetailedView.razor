@page "/ClaimDetaildView/{id}"
@using SEN381_UI.Data
@inject IDialogService DialogService
@inject NavigationManager UriHelper
@using System.Text.RegularExpressions;
<h3>Claim Detailed View</h3>
<MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%" Href="/Claim">Back</MudIconButton>
@if (load)
{
    <MudGrid>
        <MudItem xs="6" sm="6">
            <MudTextField T="string" Label="Claim ID" ReadOnly="true" Text="@id" Variant="Variant.Outlined"></MudTextField>
        </MudItem>
        <MudItem xs="6" sm="6">
            <MudTextField T="string" Label="Client" ReadOnly="true" Text="@clientName"></MudTextField>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudAutocomplete T="string" Label="Place of treatment" @bind-Value=@placeOfTreatment Text="@placeOfTreatment" SearchFunc="@PlaceOfTreatment" Margin="Margin.Dense" Dense="true" />
        </MudItem> 
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Call Details" @bind-Value=@callDetails Text="@callDetails" ReadOnly="true"></MudTextField>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Claime Status" @bind-Value=@claimeStatus Text="@claimeStatus"></MudTextField>
        </MudItem>
        @*Medical Condition*@
@*        <MudItem lg="12">

            <MudExpansionPanel class="h-25" Text="Medical condition">

                <MudExpansionPanels style="max-height:400px; overflow: auto;" class="accordion-body">
                    @foreach (MedicalCondition medical in MedicalProviderElements)
                    {
                        string text = $"Provider ID: {@medical.MedicalServiceProvidor.PolicyProviderID}";
                        medical.ProviderStatus = selectedProvidersTreatment.Where(x => x.MedicalServiceProvidor.PolicyProviderID.Equals(provider.MedicalServiceProvidor.PolicyProviderID)).ToList().Count == 0 ? provider.ProviderStatus : selectedProvidersTreatment.Where(x => x.MedicalServiceProvidor.PolicyProviderID.Equals(provider.MedicalServiceProvidor.PolicyProviderID)).ToList()[0].ProviderStatus;
                        <MudExpansionPanel Text="@text">
                            <MudText> Provider Name: @medical.MedicalServiceProvidor.PolicyProviderName </MudText>
                            <MudText> Provider Address: @medical.MedicalServiceProvidor.PolicyProviderAddresses </MudText>
                            <MudText> Provider Phone: @medical.MedicalServiceProvidor.PolicProviderPhone </MudText>
                            <MudText Align="Align.Center">
                                <MudSelect @bind-Value="medical.ProviderStatus" T="string" Label="Status" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                    @foreach (string status in @statusses)
                                    {
                                        <MudSelectItem T="string" Value="status"></MudSelectItem>
                                    }
                                </MudSelect>
                            </MudText>
                        </MudExpansionPanel>
                        <MudText Align="Align.Center">
                            @if (selectedProvidersTreatment.Where(x => x.MedicalServiceProvidor.PolicyProviderID.Equals(provider.MedicalServiceProvidor.PolicyProviderID)).ToList().Count != 0)
                            {
                                <MudButton OnClick="()=>removeProvider(provider)" Color="Color.Error">Remove</MudButton>
                            }
                            else
                            {
                                <MudButton OnClick="()=>addProvider(provider)" Color="Color.Success">Add</MudButton>
                            }
                        </MudText>
                    }
                </MudExpansionPanels>
            </MudExpansionPanel>
        </MudItem>*@
    </MudGrid>

                <MudGrid Style="margin-top:auto">
                    <MudItem xs="6" sm="4">
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" FullWidth="true" OnClick="@cancel">Cancel Changes</MudButton>
                    </MudItem>
                    <MudItem xs="6" sm="4">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true" OnClick="@updateClaims" ButtonType="ButtonType.Submit" Class="ml-auto">Save Changes</MudButton>
                    </MudItem>
                    <MudItem xs="6" sm="4">
            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@deleteClaim" FullWidth="true">Delete Medical  <MudIcon Icon="@Icons.Filled.Delete" Color="Color.Error"></MudIcon></MudButton>
                    </MudItem>
                </MudGrid>
}
@code {
    [Parameter]
    public string id { get; set; }

    private bool load = false;

    private string clientName { get; set; }

    private string medicalCondition { get; set; }
    private string placeOfTreatment { get; set; }
    private string callDetails { get; set; }
    private string claimeStatus { get; set; }

    private Claim originalClaim = new Claim();

    protected async override Task OnInitializedAsync()
    {
        await LoadClaim();
        load = true;
    }
    private async Task LoadClaim() {
        ClaimService cs = new ClaimService();
        await cs.getClientDetails(int.Parse(id)).ContinueWith((x) =>
        {
            clientName = x.Result.Client;
            placeOfTreatment = x.Result.PlaceOfTreatment;
            callDetails = x.Result.CallDetails.ToString();
            claimeStatus = x.Result.ClaimeStatus;

            originalClaim = new Claim(int.Parse(id), clientName, placeOfTreatment,int.Parse(callDetails), claimeStatus);

        }
        );
    }
    private string[] placesOfTreatment =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };
    private async Task<IEnumerable<string>> PlaceOfTreatment(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return placesOfTreatment;
        return placesOfTreatment.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async void deleteClaim()
    {
        await new ClaimService().deleteClaim(int.Parse(id)).ContinueWith((x) =>
        {
            string message = "";
            message = x.Result != null ? "Claim could not be deleted" : "Claim successfully deleted";
            showDialog(message);
        }
        );

    }
    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Claim", paramaters, options).Result;
            if (message != "Claim could not be created" && message != "Status cannot be empty." && message != "Status should only contain letters")
            {
                UriHelper.NavigateTo("/Claim");
            }
        });
    }
    private void cancel()
    {
        UriHelper.NavigateTo("/Claim");
    }
    private async void updateClaims()
    {
        if (claimeStatus == null)
        {
            showDialog("Status cannot be empty.");
        }
        else
        {
            if (!StringOnly(claimeStatus))
            {
                showDialog("Status should only contain letters");
            }
            else { 
                Claim newClaim = new Claim(int.Parse(id), clientName, placeOfTreatment, int.Parse(callDetails), claimeStatus);
                if (!originalClaim.Equals(newClaim))
                {
                    await new ClaimService().updateClaim(newClaim).ContinueWith((x) =>
                    {

                        string message = "";
                        message = x.Result != null ? "Client could not be updated" : "Client successfully updated";
                        showDialog(message);
                    });
                }
                else
                {
                    showDialog("No changes to apply.");
                }
            }

        }



    }
    public bool StringOnly(string word)
    {
        var Inputletters = @"^[a-zA-Z]{2,}$";
        bool val = Regex.IsMatch(word, Inputletters);

        return val;
    }
    public bool find(string values) { 
        foreach (string item in placesOfTreatment)
        {
            if (values.Equals(item))
            {
                return true;  
            } 

        }
        return false;

    }

}

