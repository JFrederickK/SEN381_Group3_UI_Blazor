@page "/Packages"
@using SEN381_UI.Data
@inject NavigationManager UriHelper
@inject IDialogService DialogService

<h3>Policy Packages</h3>
<MudTable ServerData="@(new Func<TableState, Task<TableData<Package>>>(loadPackages))" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Package,bool>(FilterFunc)" @bind-SelectedItem="selectedItem"
          SortLabel="Sort by" Rowper
          T="Package"
          OnRowClick="@navigateToDetails">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Packages</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Treatment Coverages</MudTh>
        <MudTh>Package Status</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.PackageID</MudTd>
        <MudTd DataLabel="TreatmentCoverages">
            <MudChipSet>
                @foreach (string item in getCoverages(context.TreatmentCoverages))
                {
                    <MudChip>@item</MudChip>
                }
            </MudChipSet>
        </MudTd>
        <MudTd DataLabel="PackageStatus">@status</MudTd>
        <MudTd><MudTooltip Text="Delete Package"><MudIconButton OnClick="()=>deletePackage(context.PackageID)" Icon="@Icons.Filled.Delete" Color="Color.Error"></MudIconButton></MudTooltip></MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {5,10,20, 25, 30, 35, 40}" />
    </PagerContent>

</MudTable>
<MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="navigateToAdd" Style="margin-top:1%" />


@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString = "";
    private Package selectedItem = null;
    private HashSet<Package> selectedItems = new HashSet<Package>();
    private string id = "1";
    private string status = "Active";



    private List<Package> Elements = new List<Package>();

    private bool FilterFunc(Package element) => FilterFunc(element, searchString);

    private bool FilterFunc(Package element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        //if (element.ClaimID.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if (element.Client.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if (element.MedicalConditions.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if (element.PlaceOfTreatment.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if (element.CallDetails.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if (element.ClaimeStatus.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if ($"{element.ClaimID} {element.Client} {element.MedicalConditions} {element.PlaceOfTreatment} {element.CallDetails} {element.ClaimeStatus}".Contains(searchString))
        //    return true;
        //return false;
        return true;
    }

    private void navigateToAdd()
    {
        UriHelper.NavigateTo($"/PackagesAdd");
    }

    private void navigateToDetails(TableRowClickEventArgs<Package> mc)
    {
        UriHelper.NavigateTo($"/Packages/{mc.Item.PackageID}");
    }

    private List<string> getCoverages(List<PackageTreatmentCoverage> tcs)
    {
        List<string> text = new List<string>();
        foreach (PackageTreatmentCoverage treat in tcs)
        {
            text.Add($"{treat.Treatment.TreatmentName}\n{treat.Coverage.CoverageDescription}");
        }
        return text;
    }


    private async Task showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialog");
        await InvokeAsync(async () =>
        {
            await DialogService.Show<Dialogue>("Delete Package", paramaters, options).Result;

        });
    }

    private async Task<TableData<Package>> loadPackages(TableState state)
    {
        await new PackageService().getPackages(state.PageSize, state.Page + 1).ContinueWith((x) =>
        {
            Elements = x.Result;
        });
        return new TableData<Package>() { Items = Elements, TotalItems = Elements.Count };
    }

    private async void deletePackage(string id)
    {
        await new PackageService().deletePackage(id).ContinueWith(async (x) =>
        {
            string message = x.Result != null ? "Package Deleted Succesfully" : "Something went wrong!";
            await showDialog(message);
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
            UriHelper.NavigateTo($"/Packages", true);
        });
    }
}


