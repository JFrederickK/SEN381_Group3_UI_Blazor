@page "/MedicalConditions/{id}"
@using SEN381_API_GROUP3.shared.models
@using SEN381_UI.Data
@using SEN381_UI.Shared.MockData
@inject NavigationManager UriHelper
@inject IDialogService DialogService

@if (load)
{
    @*Medical Condition Basic Details*@
    <MudCard style="max-height:1000px; overflow: auto;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Align="Align.Center">Medical Condition Details</MudText>
            </CardHeaderContent>
            <CardHeaderAvatar>
                <MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%" Href="/MedicalConditions">Back</MudIconButton>
            </CardHeaderAvatar>
        </MudCardHeader>
        <MudForm Class="p-5">
            <MudGrid>
                <MudGrid>
                    <MudItem xs="6" sm="6">
                        <MudTextField T="string" Label="Medical Condition ID" ReadOnly="true" Text="@id"></MudTextField>
                    </MudItem>
                    <MudItem xs="6" sm="6">
                        <MudTextField T="string" Label="Medical Condition name" @bind-Value=@name Text="@name"></MudTextField>
                    </MudItem>
                    <MudItem xs="6" sm="6">

                        <MudTextField T="string" Label="Medical Condition Description" @bind-Value=@description Text="@description"></MudTextField>

                    </MudItem>
                </MudGrid>
                @*Treatment Details *@
                <MudGrid >
                    <MudItem xs="12" sm="6">
                        <MudTable Style="border-radius:2%;margin-top:1%" Items="@medicalConditionT" Hover="true" Bordered="true" Striped="true" Filter="new Func<MedicalConditionTreatment,bool>(FilterFunc)" @bind-SelectedItem="selectedItem"
                              MultiSelection="false">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Treatments</MudText>
                                <MudSpacer />
                                <MudTextField @bind-Value="searchString" Placeholder="Search for treatment" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh >Condition Name</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Condition Name">@context.TreatmentName</MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="pageSizeOptions"  />
                            </PagerContent>

                        </MudTable>
                    </MudItem>
                        <MudItem xs="12" sm="6">
                          <MudTextField Style="margin-bottom:2%" T="string" Text="@(selectedItem == null ? "" : selectedItem.TreatmentID)" Label="Treatment ID" Variant="Variant.Outlined" Margin="Margin.Dense"> </MudTextField>
                        <MudTextField T="string" Text="@(selectedItem == null ? "" : selectedItem.TreatmentDescription)" Label="Treatment Description" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                        @if (selectedItem != null)
                        {
                            <MudButton Style="margin-top:1%" Variant="Variant.Outlined" Color="Color.Error" OnClick="@deleteMedicatTreatment" FullWidth="true">Delete Medical  <MudIcon Icon="@Icons.Filled.Delete" Color="Color.Error"></MudIcon></MudButton>

                        }
                    </MudItem>
                </MudGrid>
                <MudGrid Style="margin-top:auto">
                    <MudItem xs="6" sm="4">
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" FullWidth="true" OnClick="@cancel">Cancel Changes</MudButton>
                    </MudItem>
                    <MudItem xs="6" sm="4">
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true" OnClick="@saveMedicalCondtion" ButtonType="ButtonType.Submit" Class="ml-auto">Save Changes</MudButton>
                    </MudItem>
                    <MudItem xs="6" sm="4">
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@deleteMedical" FullWidth="true">Delete Medical  <MudIcon Icon="@Icons.Filled.Delete" Color="Color.Error"></MudIcon></MudButton>
                    </MudItem>
                </MudGrid>

            </MudGrid>
        </MudForm>

    </MudCard>
}


@code {
    private int[] pageSizeOptions = new int[] { 5, 10, 15 };
    private string searchString = "";
    private MedicalConditionTreatment selectedItem = null;
    private MedicalCondition medicalDetails = new MedicalCondition();
    private MedicalCondition newMedical = new MedicalCondition();
    public List<MedicalConditionTreatment> medicalConditionT = new List<MedicalConditionTreatment>();

    public bool Selected_Treatment { get; set; } = false;

    [Parameter]
    public string? id { get; set; }

    private string name { get; set; }
    private string description { get; set; }
    private string TreatmentID { get; set; }
    private bool load = false;


    protected async override Task OnInitializedAsync() {
        await LoadMedicalCondition();
        await LoadTreatments();
        load = true;

    }

    private async Task LoadMedicalCondition() {
        MedicalConditionService cs = new MedicalConditionService();
        await cs.getMCDetails(id).ContinueWith((x)=> {
            name = x.Result.MedicalConditionName;
            description = x.Result.MedicalConditionDescription;

            medicalDetails = new MedicalCondition(int.Parse(id), name, description);
        });
    }
    private async Task LoadTreatments()
    {
        MedicalConditionService cs = new MedicalConditionService();
        await cs.getMCTDetails(int.Parse(id)).ContinueWith((x) =>
        {
            medicalConditionT = x.Result;
        });
    }

    private void cancel()
    {
        UriHelper.NavigateTo("/MedicalConditions");
    }


    private async void saveMedicalCondtion() {
        MedicalCondition newMC = new MedicalCondition(int.Parse(id), name, description);
        if (!newMC.GetHashCode().Equals(medicalDetails.GetHashCode()))
        {
            await new MedicalConditionService().updateMedical(newMC).ContinueWith((x)=> { 
                string message = "";
                message = x.Result != null ? "Medical Condition successfully updated" : "Medical Condition could not be updated";
                showDialog(message);

            });
        }
        else
        {
            showDialog("No changes to apply.");
        }

    }
    private async void deleteMedical()
    {
        await new MedicalConditionService().deleteMedicalCondition(id).ContinueWith((x) =>
        {
            string message = "";
            message = x.Result != null ? "Medical Condition could not be deleted" : "Medical Condition successfully deleted";
            showDialog(message);
        }
        );

    }
    private async void deleteMedicatTreatment()
    {

            await new MedicalConditionService().deleteMedicalConditionTreatment(int.Parse(id), selectedItem.TreatmentID).ContinueWith((x) =>
     {
         string message = "";
         message = x.Result != null ? "Medical Condition could not be deleted" : "Medical Condition successfully deleted";
         showDialog(message);
     }
     );
        

    }

    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Medical Condition", paramaters, options).Result;
        });
    }
    private bool FilterFunc(MedicalConditionTreatment element) => FilterFunc(element, searchString);

    private bool FilterFunc(MedicalConditionTreatment element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.TreatmentID.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;

    }

}

