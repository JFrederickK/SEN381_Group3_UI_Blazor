@using SEN381_UI.Data
@using SEN381_UI.Shared.MockData
@page "/Treatment/{id}"
@inject NavigationManager navigation
@inject IDialogService DialogService

@if (newTreatment != null && newTreatment.MedicalServiceProviderTreatments != null)
{
    
<MudCard style="max-height:1000px; overflow: auto;">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5" Align="Align.Center">Treatment Details</MudText>
        </CardHeaderContent>
        <CardHeaderAvatar>
            <MudIconButton OnClick="@navigateBack" Icon="@Icons.Filled.KeyboardBackspace"></MudIconButton>
        </CardHeaderAvatar>
    </MudCardHeader>
    <MudForm Class="p-5">
        <MudGrid>

            @*Treatment Basic Details*@
            <MudItem xs="3">
                <MudTextField T="string" Label="Treatment ID" ReadOnly="true" @bind-Value="newTreatment.TreatmentID"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField T="string" Label="Treatment Name" @bind-Value="treatmentName"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField T="string" Label="Treatment Description" @bind-Value="treatmentDescription"></MudTextField>
            </MudItem>

            @*Provider Details *@
            <MudItem lg="12">
                <MudExpansionPanel class="h-25" Text="Medical Service Providers">

                    <MudExpansionPanels style="max-height:400px; overflow: auto;" class="accordion-body">
                            @foreach (MedicalServiceProviderTreatment provider in MedicalProviderElements)
                        {
                            string text = $"Provider ID: {@provider.MedicalServiceProvidor.PolicyProviderID}";
                                provider.ProviderStatus = selectedProvidersTreatment.Where(x => x.MedicalServiceProvidor.PolicyProviderID.Equals(provider.MedicalServiceProvidor.PolicyProviderID)).ToList().Count == 0 ? provider.ProviderStatus : selectedProvidersTreatment.Where(x => x.MedicalServiceProvidor.PolicyProviderID.Equals(provider.MedicalServiceProvidor.PolicyProviderID)).ToList()[0].ProviderStatus;
                                <MudExpansionPanel Text="@text">
                                <MudText> Provider Name: @provider.MedicalServiceProvidor.PolicyProviderName </MudText>
                                <MudText> Provider Address: @provider.MedicalServiceProvidor.PolicyProviderAddresses </MudText>
                                <MudText> Provider Phone: @provider.MedicalServiceProvidor.PolicProviderPhone </MudText>
                                <MudText Align="Align.Center">
                                    <MudSelect @bind-Value="provider.ProviderStatus" T="string" Label="Status" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                        @foreach (string status in @statusses)
                                        {
                                            <MudSelectItem T="string" Value="status"></MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudText>
                            </MudExpansionPanel>
                            <MudText Align="Align.Center">
                                    @if (selectedProvidersTreatment.Where(x=> x.MedicalServiceProvidor.PolicyProviderID.Equals(provider.MedicalServiceProvidor.PolicyProviderID)).ToList().Count!=0)
                                    {
                                    <MudButton OnClick="()=>removeProvider(provider)" Color="Color.Error">Remove</MudButton>
                                }
                                else
                                {
                                    <MudButton OnClick="()=>addProvider(provider)" Color="Color.Success">Add</MudButton>
                                }
                            </MudText>
                        }
                    </MudExpansionPanels>
                </MudExpansionPanel>
            </MudItem>

            <MudItem xs="6" sm="6">
                <MudButton OnClick="@resetTreatment">Cancel Changes</MudButton>
            </MudItem>
            <MudItem xs="6" sm="6">
                <MudButton OnClick="@updateTreatment">Save Changes</MudButton>
            </MudItem>

        </MudGrid>
    </MudForm>

</MudCard>
}


@code {

    [Parameter]
    public string? id { get; set; }
    private Treatment originalTreatment = new Treatment();
    private Treatment newTreatment = new Treatment();
    public string treatmentName { get; set; }
    public string treatmentID { get; set; }
    public string treatmentDescription { get; set; }

    private List<MedicalServiceProviderTreatment> MedicalProviderElements = new List<MedicalServiceProviderTreatment>();
    private List<MedicalServiceProviderTreatment> selectedProvidersTreatment = new List<MedicalServiceProviderTreatment>();
    private List<string> statusses = new List<string>() { "Standard", "Prefered", "BlackListed" };

    protected async override Task OnInitializedAsync()
    {
        //get list of providerstreatments
        await new TreatmentService().getTreatmentDetails(id).ContinueWith((x) =>
        {
            originalTreatment = new Treatment(x.Result.TreatmentID, x.Result.TreatmentName, x.Result.TreatmentDescription, new List<MedicalServiceProviderTreatment>(x.Result.MedicalServiceProviderTreatments));
            newTreatment = new Treatment(x.Result.TreatmentID, x.Result.TreatmentName, x.Result.TreatmentDescription, new List<MedicalServiceProviderTreatment>(x.Result.MedicalServiceProviderTreatments));
            treatmentName = x.Result.TreatmentName;
            treatmentID = x.Result.TreatmentID;
            treatmentDescription = x.Result.TreatmentDescription;
            selectedProvidersTreatment = new List<MedicalServiceProviderTreatment>(x.Result.MedicalServiceProviderTreatments);
        });

        await new MedicalServiceProviderService().getProviders(1000, 1).ContinueWith((x) =>
        {
            foreach (MedicalServiceProvider prov in x.Result)
            {
                MedicalProviderElements.Add(new MedicalServiceProviderTreatment(0,"Standard",prov));
            }
        });
    }

    private void navigateBack(){
        navigation.NavigateTo("/Treatment");
    }
    private void addProvider(MedicalServiceProviderTreatment mspt)
    {
        selectedProvidersTreatment.Add(mspt);
    }
    private void removeProvider(MedicalServiceProviderTreatment mspt)
    {
        selectedProvidersTreatment=selectedProvidersTreatment.Where(x=> !x.MedicalServiceProvidor.PolicyProviderID.Equals(mspt.MedicalServiceProvidor.PolicyProviderID)).ToList();
    }

    private async void showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialogue");
        await InvokeAsync(async () =>
        {
            var result = await DialogService.Show<Dialogue>("Treatment", paramaters, options).Result;
        });
    }

    private void updateTreatment(){
        newTreatment = new Treatment(treatmentID,treatmentName,treatmentDescription,selectedProvidersTreatment);
        new TreatmentService().updateTreatment(newTreatment).ContinueWith((x)=>{
            string message = "";
            message = x.Result != null ? "Treatment Updated successfully" : "Treatment could not be updated";
            showDialog(message);
        });
    }

    private void resetTreatment(){
        newTreatment = new Treatment(id, originalTreatment.TreatmentName, originalTreatment.TreatmentDescription,new List<MedicalServiceProviderTreatment>(originalTreatment.MedicalServiceProviderTreatments));
        treatmentDescription=originalTreatment.TreatmentDescription;
        treatmentName = originalTreatment.TreatmentName;
        selectedProvidersTreatment = new List<MedicalServiceProviderTreatment>(originalTreatment.MedicalServiceProviderTreatments);
    }
}

