@using SEN381_UI.Data
@using SEN381_UI.Shared.MockData
@page "/Treatment/{id}"
@inject NavigationManager navigation

<MudCard style="max-height:1000px; overflow: auto;">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5" Align="Align.Center">Treatment Details</MudText>
        </CardHeaderContent>
        <CardHeaderAvatar>
            <MudIconButton OnClick="@navigateBack" Icon="@Icons.Filled.KeyboardBackspace"></MudIconButton>
        </CardHeaderAvatar>
    </MudCardHeader>
    <MudForm Class="p-5">
        <MudGrid>

            @*Medical Condition Basic Details*@
            <MudItem xs="4" sm="6">
                <MudTextField T="string" Label="Treatment ID" ReadOnly="true" @bind-Value="tempTreatment.TreatmentID"></MudTextField>
            </MudItem>
            <MudItem xs="4" sm="6">
                <MudTextField T="string" Label="Treatment Name" @bind-Value="tempTreatment.TreatmentName"></MudTextField>
            </MudItem>
            <MudItem xs="4" sm="6">
                <MudTextField T="string" Label="Treatment Description" ReadOnly="true" @bind-Value="tempTreatment.TreatmentDescription"></MudTextField>
            </MudItem>

            @*Provider Details *@
            <MudItem lg="12" sm="6">
                <MudExpansionPanel class="h-25" Text="Medical Service Providers">

                    <MudExpansionPanels style="max-height:400px; overflow: auto;" class="accordion-body">
                        @foreach (MedicalServiceProviderTreatment provider in tempTreatment.MedicalServiceProviderTreatments)
                        {
                            string text = $"Provider ID: {@provider.MedicalServiceProvidor.PolicyProviderID}";
                            <MudExpansionPanel Text="@text">
                                <MudText> Provider Name: @provider.MedicalServiceProvidor.PolicyProviderName </MudText>
                                <MudText> Provider Address: @provider.MedicalServiceProvidor.PolicyProviderAddresses </MudText>
                                <MudText> Provider Phone: @provider.MedicalServiceProvidor.PolicProviderPhone </MudText>
                                <MudText Align="Align.Center">
                                    @if (selectedProviders.Contains(provider.MedicalServiceProvidor))
                                    {
                                        <MudButton OnClick="()=>removeProvider(provider)" Color="Color.Error">Remove</MudButton>
                                    }
                                    else
                                    {
                                        <MudButton OnClick="()=>addProvider(provider)" Color="Color.Success">Add</MudButton>
                                    }
                                </MudText>
                            </MudExpansionPanel>

                        }
                    </MudExpansionPanels>
                </MudExpansionPanel>
            </MudItem>

            <MudItem xs="6" sm="6">
                <MudButton>Cancel Changes</MudButton>
            </MudItem>
            <MudItem xs="6" sm="6">
                <MudButton>Save Changes</MudButton>
            </MudItem>

        </MudGrid>
    </MudForm>

</MudCard>


@code {

    [Parameter]
    public string? id { get; set; }
    string name = "dasd";//Get from service
    public string treatmentName { get; set; }
    public string treatmentID { get; set; }
    public string treatmentDescription { get; set; }
    private string searchMedicalServiceProvider = "";
    private MedicalServiceProviderTreatment selectedMedical = null;
    private Treatment originalTreatment = new Treatment();
    private Treatment tempTreatment = new Treatment();
    private Treatment newTreatment = new Treatment();

    private List<MedicalServiceProvider> MedicalProviderElements = new List<MedicalServiceProvider>();
    private List<MedicalServiceProviderTreatment> selectedProvidersTreatment = new List<MedicalServiceProviderTreatment>();
    private List<MedicalServiceProvider> selectedProviders = new List<MedicalServiceProvider>();
    private List<string> statusses = new List<string>() { "Standard", "Prefered", "BlackListed" };

    List<MedicalServiceProvider> providers = new MedicalProviderMock().GetMedicalServiceProviders();//Replace with service

    protected override void OnInitialized()
    {
        //get list of providerstreatments
        new TreatmentService().getTreatmentDetails(id).ContinueWith((x) =>
        {
            originalTreatment = x.Result;
            tempTreatment = x.Result;
            selectedProvidersTreatment=tempTreatment.MedicalServiceProviderTreatments;
        });
    }

    private void navigateBack(){
        navigation.NavigateTo("/Treatment");
    }
    private void addProvider(MedicalServiceProviderTreatment mspt)
    {
        selectedProvidersTreatment.Add(mspt);
    }
    private void removeProvider(MedicalServiceProviderTreatment mspt)
    {
        selectedProvidersTreatment.Remove(mspt);
    }
}

