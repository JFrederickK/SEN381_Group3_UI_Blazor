@page "/MedicalServiceProvider"
@inject NavigationManager UriHelper
@inject IDialogService DialogService
<h3>Medical Service Provider</h3>
<MudIconButton Icon="@Icons.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" aria-label="back" Style="margin-bottom:1%" >Back</MudIconButton>

<MudTable ServerData="@(new Func<TableState, Task<TableData<MedicalServiceProvider>>>(loadProviders))" Hover="@hover" Bordered="@bordered" Striped="@striped"
          Filter="new Func<MedicalServiceProvider,bool>(FilterFunc)" @bind-SelectedItem="selectedItem"
          SortLabel="Sort by"
          T="MedicalServiceProvider"
    OnRowClick="@navigate"
    >
        <ToolBarContent>
            <MudText Typo="Typo.h6">Medical Service Provider</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nr</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Adress</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Phone</MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.PolicyProviderID</MudTd>
            <MudTd DataLabel="Name">@context.PolicyProviderName</MudTd>
            <MudTd DataLabel="Adress">@context.PolicyProviderAddresses</MudTd>
            <MudTd DataLabel="Email">@context.PolicyProviderEmail</MudTd>
            <MudTd DataLabel="Phone">@context.PolicProviderPhone</MudTd>
            <MudTd><MudTooltip Text="Delete Treatment"><MudIconButton OnClick="()=>deleteProvider(context.PolicyProviderID)" Icon="@Icons.Filled.Delete" Color="Color.Error"></MudIconButton></MudTooltip></MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>


<MudItem Style="margin-top:2%">
    <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" Href="/MSPAddView" />
</MudItem>


@code {
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString = "";
    private MedicalServiceProvider selectedItem = null;
    private HashSet<MedicalServiceProvider> selectedItems = new HashSet<MedicalServiceProvider>();

    private List<MedicalServiceProvider> Elements = new List<MedicalServiceProvider>();

    private async Task<TableData<MedicalServiceProvider>> loadProviders(TableState state)
    {
        await new MedicalServiceProviderService().getProviders(state.PageSize, state.Page + 1).ContinueWith((x) =>
        {
            Elements = x.Result;
        });
        return new TableData<MedicalServiceProvider>() { Items = Elements, TotalItems = Elements.Count };
    }

    private bool FilterFunc(MedicalServiceProvider element) => FilterFunc(element, searchString);

    private bool FilterFunc(MedicalServiceProvider element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.PolicyProviderID.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PolicyProviderName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PolicyProviderAddresses.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PolicyProviderEmail.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PolicProviderPhone.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.PolicyProviderID} {element.PolicyProviderName} {element.PolicyProviderAddresses} {element.PolicyProviderEmail} {element.PolicProviderPhone}".Contains(searchString))
            return true;
        return false;
    }



    private void navigate(TableRowClickEventArgs<MedicalServiceProvider> p)
    {
        UriHelper.NavigateTo($"/MedicalServiceProvider/{p.Item.PolicyProviderID}");
    }

    private async Task showDialog(string message)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true };
        DialogParameters paramaters = new DialogParameters();
        paramaters.Add("ContentText", message);
        paramaters.Add("ButtonText", "Close Dialog");
        await InvokeAsync(async () =>
        {
            await DialogService.Show<Dialogue>("Delete Provider", paramaters, options).Result;

        });
    }

    private async void deleteProvider(string id)
    {
        await new MedicalServiceProviderService().deleteProvider(id).ContinueWith(async (x) =>
        {
            string message = x.Result != null ? "Provider Deleted Succesfully" : "Something went wrong!";
            await showDialog(message);
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
            UriHelper.NavigateTo($"/MedicalServiceProvider", true);
        });
    }
}
